#include <Servo.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

Servo servo;

// Define pin connections
const int buzzer = 9;      // Buzzer connected to pin 9
const int redLED = 12;     // Red LED connected to pin 12
const int greenLED = 11;   // Green LED connected to pin 11

// Initialize the LCD (16x2) with I2C address 0x27
LiquidCrystal_I2C lcd(0x27, 16, 2);

void setup() {
  pinMode(buzzer, OUTPUT);
  pinMode(redLED, OUTPUT);
  pinMode(greenLED, OUTPUT);
  servo.attach(10);       // Servo motor connected to pin 10
  servo.write(0);         // Initial position of servo
  Serial.begin(9600);     // Initialize serial communication
  
  // Initialize the LCD with dimensions 16 columns and 2 rows
  lcd.begin(16, 2);
  lcd.backlight();        // Turn on LCD backlight
  lcd.clear();
  lcd.print("System Ready!");  // Display a startup message
  delay(1000);
  lcd.clear();
}

void loop() {
  if (Serial.available()) {
    String commandString = Serial.readStringUntil('\n'); // Read full line from Python
    Serial.println("Received: " + commandString);       // Debug feedback

    lcd.clear(); // Clear LCD for new message
    
    // Parse and execute commands
    if (commandString.indexOf("BUZZER_ON") >= 0) {
      tone(buzzer, 1000); // Turn on buzzer with 1kHz tone
      delay(2000);
      noTone(buzzer);
      lcd.print("Rain Clean H2O");
      delay(1000);
    } else if (commandString.indexOf("BUZZER_OFF") >= 0) {
      noTone(buzzer);     // Turn off buzzer
      lcd.print("No rain today");
      delay(1000);
    }

    if (commandString.indexOf("SERVO_RUN") >= 0) {
      servo.write(90); // Rotate to 90 degrees
      delay(1000);     // Hold for 1 second
      servo.write(0);  // Return to 0 degrees
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Valve ON");
      delay(1000);
    } else {
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Valve OFF");
      delay(1000);
    }

    if (commandString.indexOf("LED_RED") >= 0) {
      digitalWrite(redLED, HIGH);
      digitalWrite(greenLED, LOW);
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Bad light!");
      delay(1000);
    } else if (commandString.indexOf("LED_GREEN") >= 0) {
      digitalWrite(redLED, LOW);
      digitalWrite(greenLED, HIGH);
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Good light!");
      delay(1000);
    }

    if (commandString.indexOf("MOISTURE:") >= 0) {
      int moistureIndex = commandString.indexOf("MOISTURE:") + 9; // Get index of moisture value
      String moistureValue = commandString.substring(moistureIndex); // Extract substring starting from the moisture value
      moistureValue.trim(); // Remove any extraneous whitespace or newlines
      Serial.println("Moisture Value: " + moistureValue); // Print moisture value to serial monitor
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Moisture:");
      lcd.setCursor(0, 1);
      lcd.print(moistureValue + " %"); // Display moisture value on LCD
      delay(1000);
    }

    Serial.println("Commands executed."); // Confirm execution
    delay(10000);
  }
}
